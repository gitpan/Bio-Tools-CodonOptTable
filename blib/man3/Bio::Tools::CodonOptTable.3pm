.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::CodonOptTable 3pm"
.TH Bio::Tools::CodonOptTable 3pm "2009-01-01" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::CodonOptTable \- A more elaborative way to check the codons quality
.SH "VERSION"
.IX Header "VERSION"
Version 0.03
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
We produces each codon frequency,
	    Relative Synonymous Codons Uses and
	    Relative Adaptiveness of a Codon table and bar graph
.PP
that will help you to calculate the Codon Adaptation Index (\s-1CAI\s0) of a gene, to see the gene expression level.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Tools::CodonOptTable;
.Ve
.PP
.Vb 6
\&    my $seqobj = Bio::Tools::CodonOptTable\->new ( \-seq => \(aqATGGGGTGGGCACCATGCTGCTGTCGTGAATTTGGGCACGATGGTGTACGTGCTCGTAGCTAGGGTGGGTGGTTTG\(aq,
\&                                   \-id  => \(aqGeneFragment\-12\(aq,
\&                                   \-accession_number => \(aqMyseq1\(aq,
\&                                   \-alphabet => \(aqdna\(aq,
\&                                   \-is_circular => 1
\&                                   );
.Ve
.PP
.Vb 1
\&    #If you wanna read from file
.Ve
.PP
.Vb 2
\&    my $seqobj = Bio::Tools::CodonOptTable\->new(\-file => "contig.fasta",
\&                                             \-format => \(aqFasta\(aq);
.Ve
.PP
.Vb 1
\&    #If you have Accession number and want to get file from NCBI
.Ve
.PP
.Vb 1
\&    my $seqobj = Bio::Tools::CodonOptTable\->new(\-ncbi_id => "J00522");
.Ve
.PP
.Vb 1
\&    my $myCodons = $seqobj\->rscu_rac_table();
.Ve
.PP
.Vb 12
\&    if($myCodons)
\&        {
\&            for my $each_aa (@$myCodons)
\&                    {
\&                        print "Codon      : ",$each_aa\->[1]\->{\(aqcodon\(aq},"\et";
\&                        print "Frequency  : ",$each_aa\->[1]\->{\(aqfrequency\(aq},"\et";
\&                        print "AminoAcid  : ",$each_aa\->[1]\->{\(aqaa_name\(aq},"\et";
\&                        print "RSCU Value : ",$each_aa\->[1]\->{\(aqrscu\(aq},"\et"; #Relative Synonymous Codons Uses
\&                        print "RAC Value  : ",$each_aa\->[1]\->{\(aqrac\(aq},"\et"; #Relative Adaptiveness of a Codon
\&                        print "\en";
\&                    }
\&        }
.Ve
.PP
.Vb 2
\&    # to produce a graph between RSCU & RAC
\&    # Graph output file extension should be GIF, we support GIF only
.Ve
.PP
.Vb 1
\&    $seqobj\->generate_graph($myCodons,"myoutput.gif");
.Ve
.PP
.Vb 1
\&    ...
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Vb 1
\&    Title   : new
.Ve
.PP
.Vb 4
\&    Usage1   : $seq    = Bio::Tools::CodonOptTable\->new( \-seq => \(aqATGGGGGTGGTGGTACCCT\(aq,
\&                                              \-id  => \(aqhuman_id\(aq,
\&                                              \-accession_number => \(aqAL000012\(aq,
\&                                              );
.Ve
.PP
.Vb 3
\&    Usage2   : $seq    = Bio::Tools::CodonOptTable\->new( \-file => \(aqmyseq.fasta\(aq,
\&                                              \-format => \(aqfasta\(aq,
\&                                              );
.Ve
.PP
.Vb 1
\&    Usage3   : $seq    = Bio::Tools::CodonOptTable\->new( \-ncbi_id => \(aqJ00522\(aq);
.Ve
.PP
.Vb 3
\&    Function: Returns a new primary seq object from
\&              basic constructors, being a string for the sequence
\&              and strings for id and accession_number.
.Ve
.PP
.Vb 1
\&    Returns : a new Bio::PrimarySeq object
.Ve
.PP
.Vb 10
\&    Args    : \-seq              => sequence string
\&              \-display_id       => display id of the sequence (locus name) 
\&              \-accession_number => accession number
\&              \-primary_id       => primary id (Genbank id)
\&              \-desc             => description text
\&              \-alphabet         => molecule type (dna,rna,protein)
\&              \-id               => alias for display id
\&              \-file             => file location
\&              \-format           => file format
\&              \-ncbi_id          => NCBI accession number
.Ve
.PP
.Vb 2
\&    Note    : IF you are reading sequence from file it will call _read_localfile method
\&              IF you are fetching file form NCBI it will call _read_remotefile method
.Ve
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
.Vb 1
\&    Title   : calculate_rscu
.Ve
.PP
.Vb 1
\&    Function: Calculate the RSCU(Relative Synonymous Codons Uses).
.Ve
.PP
.Vb 2
\&    Note    : The formula is used in the following references.
\&            http://www.pubmedcentral.nih.gov/articlerender.fcgi?tool=pubmed&pubmedid=3547335
.Ve
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
.Vb 1
\&    Title   : calculate_rac
.Ve
.PP
.Vb 1
\&    Function: Calculate the RAC(Relative Adaptiveness of a Codon).
.Ve
.PP
.Vb 2
\&    Note    : The formula is used in the following references.
\&            http://www.pubmedcentral.nih.gov/articlerender.fcgi?tool=pubmed&pubmedid=3547335
.Ve
.PP
\fI\s-1METHODS\s0\fR
.IX Subsection "METHODS"
.PP
.Vb 1
\&    Title   : generate_graph
.Ve
.PP
.Vb 1
\&    Function: Produce a bar graph between RAC(Relative Adaptiveness of a Codon) & RSCU(Relative Synonymous Codons Uses).
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Rakesh Kumar Shardiwal, \f(CW\*(C`<rakesh.shardiwal at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-bio\-tools\-codonopttable at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Bio\-Tools\-CodonOptTable>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Bio::Tools::CodonOptTable
.Ve
.PP
You can also look for information at:
.IP "* \s-1RT:\s0 \s-1CPAN\s0's request tracker" 4
.IX Item "RT: CPAN's request tracker"
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Bio\-Tools\-CodonOptTable>
.IP "* AnnoCPAN: Annotated \s-1CPAN\s0 documentation" 4
.IX Item "AnnoCPAN: Annotated CPAN documentation"
<http://annocpan.org/dist/Bio\-Tools\-CodonOptTable>
.IP "* \s-1CPAN\s0 Ratings" 4
.IX Item "CPAN Ratings"
<http://cpanratings.perl.org/d/Bio\-Tools\-CodonOptTable>
.IP "* Search \s-1CPAN\s0" 4
.IX Item "Search CPAN"
<http://search.cpan.org/dist/Bio\-Tools\-CodonOptTable/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Lalchand Kumawat <lalchand82@gmail.com> 
Rajneesh Kumar Sharma <biorajneesh@gmail.com>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008 Rakesh Kumar Shardiwal, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
